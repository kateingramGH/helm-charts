name: Deploy_AKS_APPS_$(Build.BuildId)

parameters:
  - name: deploy_kube_prometheus_stack
    displayName: Deploy Kube Prometheus Stack?
    type: boolean
    default: false

variables:
  - name: vault_address
    value: http://vault.cubicnextcloud.com.au:8200
  - name: vault_mount
    value: projects
  - name: vault_secrets_path
    value: nts_new_zealand/sbx
  - name: pool_name
    value: APAC_CubicNextCloud
  - name: roleId
    value: role_id.txt
  - name: secretId
    value: secret_id.txt

trigger: none
pr: none

stages:
  - stage: Deploy_Prometheus
    displayName: Deploy Prometheus Stack to AKS
    condition: eq('${{ parameters.deploy_kube_prometheus_stack }}', true)
    jobs:
      - job: Helm_Deploy
        displayName: Helm Install Kube-Prometheus-Stack
        pool: ${{ variables.pool_name }}
        workspace:
          clean: all
        steps:
          - task: DownloadSecureFile@1
            name: DownloadRoleId
            inputs:
              secureFile: 'role_id.txt'

          - task: DownloadSecureFile@1
            name: DownloadSecretId
            inputs:
              secureFile: 'secret_id.txt'

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'

          - script: |
              echo "Downloading kubelogin"
              curl -L -o kubelogin-linux-amd64.zip https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip

              echo "Extracting kubelogin"
              unzip kubelogin-linux-amd64.zip -d ./kubelogin

              echo "Setting execute permissions"
              chmod +x ./kubelogin/bin/linux_amd64/kubelogin

              echo "Adding kubelogin to PATH"
              export PATH=$PATH:$(pwd)/kubelogin/bin/linux_amd64

              echo "Verifying kubelogin install"
              kubelogin --version
            displayName: Install kubelogin
            
          - script: |
              echo "Python version:"
              python3 --version

              echo "Setting environment variables"
              export ROLE_ID=$(cat ${{ variables.roleId }})
              export SECRET_ID=$(cat ${{ variables.secretId }})
              export VAULT_ADDR=${{ variables.vault_address }}
              export VAULT_MOUNT=${{ variables.vault_mount }}
              export SECRETS_PATH=${{ variables.vault_secrets_path }}

              echo "Logging into Vault"
              VAULT_TOKEN=$(vault write -format=json auth/approle/login role_id=$ROLE_ID secret_id=$SECRET_ID | jq -r .auth.client_token)

              echo "Fetching Azure credentials from Vault"
              CLIENT_ID=$(vault kv get -field=azure_application_id $VAULT_MOUNT/$SECRETS_PATH/azure)
              CLIENT_SECRET=$(vault kv get -field=azure_application_secret $VAULT_MOUNT/$SECRETS_PATH/azure)
              TENANT_ID=$(vault kv get -field=tenant_id $VAULT_MOUNT/$SECRETS_PATH/azure)
              SUBSCRIPTION_ID=$(vault kv get -field=subscription_id $VAULT_MOUNT/$SECRETS_PATH/azure)
              RESOURCE_GROUP=$(vault kv get -field=azure_resource_group_name $VAULT_MOUNT/$SECRETS_PATH/azure)
              CLUSTER_NAME=$(vault kv get -field=cluster_name_pub $VAULT_MOUNT/$SECRETS_PATH/azure)

              echo "Logging into Azure and configuring kubectl"
              az login --output none --service-principal -u $CLIENT_ID -p $CLIENT_SECRET --tenant $TENANT_ID
              az account set --subscription $SUBSCRIPTION_ID
              az aks get-credentials --overwrite-existing --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME

              echo "Converting kubeconfig for SPN auth"
              kubelogin convert-kubeconfig -l spn --client-id $CLIENT_ID --client-secret $CLIENT_SECRET

              echo "Fetching Helm values from Vault"
              vault kv get -format=json $VAULT_MOUNT/$SECRETS_PATH/prometheus | jq -r '.data.data' > prometheus.yaml

              echo "Deploying kube-prometheus-stack via Helm"
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo update
              helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
                --namespace monitoring --create-namespace \
                --values prometheus.yaml \
                --debug --atomic
            displayName: 'Install and Deploy Prometheus Stack'
